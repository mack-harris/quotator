<?php


//Implements hook_block_info
function quotator_block_info() {
	$blocks['myquote'] = array(
		'info' => t('A Quote rotator.'),
		'cache' => DRUPAL_CACHE_PER_ROLE,
	);

	return $blocks;
}

//Implements hook_block_view
function quotator_block_view($delta) {
	$block = array();

	switch ($delta){
		case 'myquote':
			$quotation = variable_get('deep_thoughts');
			$author = variable_get('author');
			$block['subject'] = t('Quotable quotes');
			//Javascript goes in 'content', I would think.
			//drupal_add_js('rotator.js');
			$block['content'] = t($quotation);
			break;
		default:
			break;
	}
	return $block;
}

/**function drupalmodule_block_configure($delta) {
$form = array;
switch ($delta) {
case 'Quotable':
$default_text = '';
$form['quotation1'] = array(
'#type' => 'textfield',
â€Ž '#title' => t('Quotation 1'),
'#description' => t('Enter the text of your first quote.'),
'#size' => 100,
'#maxlength' => 200,
'#default_value' => variable_get('mei_core_quotable-quote1', $default_text),
'#required' => TRUE,
);


default:
break;
}
return $form;
}*/


//Implements hook_block_configure
function quotator_block_configure($delta) {
	$form = array();
	switch($delta){
		case 'myquote':
			$form['#tree'] = TRUE;
			$form['quotable'] = array(
				'#type' => 'fieldset',
				'#title' => t('Quotable'),
				'#collapsible' => FALSE,


				'q' => array(
					'#type' => 'textfield',
					'#title' => t('Quote'),
					'#description' => t('Enter your quote.'),
					'#size' => 100,
					'#maxlength' => 200,
					'#default_value' => variable_get('deep_thoughts'),
				'a' => array(
					'#type' => 'textfield',
					'#title' => t('Attribution'),
					'#description' => t('Enter your attribution.'),
					'#size' => 100,
					'#maxlength' => 200,
					'#default_value' => variable_get('author'),
					),
				),
			);
			break;
		default:
			break;
	}
	return $form;
}

//Implements hook_block_save()

function quotator_block_save($delta = 'myquote', $edit = array()) {
	if($delta == 'myquote'){
		if(isset($edit) ) {	
		//do some validation, set global variables in the db
			if(isset($edit['quotable']['a'])){
				variable_set('deep_thoughts', $edit['quotable']['q']);
			}
			if(isset($edit['quotable']['q'])){
				variable_set('author', $edit['quotable']['a']);
			}
		}
	}
}


//	variable_set('deep_thoughts', $edit['quotable']['q']);
//	variable_set('author', $edit['quotable']['a']);
//}




/**$attribution = $edits['attribution1'];
if(isset($edits['reference']) && !empty($edits['reference'])) {
check for existing link
$test = strpos($attribution, '<');
strip old link
if ($test != FALSE) {
$attribution = strstr($attribution, '<', 'before_needle');
}
load the node and get the title to prep the link on save, rather than view
$node = node_load($edits['reference']);
$link = l($node->title, 'node/' . $node->nid);
$attribution .= " " . $link;
variable_set('mei_core_quotable-nid', $edits['reference']);
} else {
variable_del('mei_core_quotable-nid');
}
variable_set('mei_core_quotable-att', $attribution);
}
}
if(isset($edits['quotation2'])){
variable_set('mei_core_quotable-quote2', $edits['quotation2']);
}
if(isset($edits['attribution2'])){
variable_set('mei_core_quotable-att2', $edits['attribution2']);
}
if(isset($edits['quotation3'])){
variable_set('mei_core_quotable-quote3', $edits['quotation3']);
}
if(isset($edits['attribution3'])){
variable_set('mei_core_quotable-att3', $edits['attribution3']);
}*/


/** function drupal_add_js('rotator.js'){
$javascript = &drupal_static(__FUNCTION__, array());

// Construct the options, taking the defaults into consideration.
if (isset($options)) {
if (!is_array($options)) {
$options = array('type' => $options);
}
}
else {
$options = array();
}
$options += drupal_js_defaults($data);

// Preprocess can only be set if caching is enabled.
$options['preprocess'] = $options['cache'] ? $options['preprocess'] : FALSE;

// Tweak the weight so that files of the same weight are included in the
// order of the calls to drupal_add_js().
$options['weight'] += count($javascript) / 1000;

if (isset($data)) {
// Add jquery.js and drupal.js, as well as the basePath setting, the
// first time a JavaScript file is added.
if (empty($javascript)) {
// url() generates the prefix using hook_url_outbound_alter(). Instead of
// running the hook_url_outbound_alter() again here, extract the prefix
// from url().
url('', array('prefix' => &$prefix));
$javascript = array(
'settings' => array(
'data' => array(
array('basePath' => base_path()),
array('pathPrefix' => empty($prefix) ? '' : $prefix),
),
'type' => 'setting',
'scope' => 'header',
'group' => JS_LIBRARY,
'every_page' => TRUE,
'weight' => 0,
),
'misc/drupal.js' => array(
'data' => 'misc/drupal.js',
'type' => 'file',
'scope' => 'header',
'group' => JS_LIBRARY,
'every_page' => TRUE,
'weight' => -1,
'preprocess' => TRUE,
'cache' => TRUE,
'defer' => FALSE,
),
);
// Register all required libraries.
drupal_add_library('system', 'jquery', TRUE);
drupal_add_library('system', 'jquery.once', TRUE);
}

switch ($options['type']) {
case 'setting':
// All JavaScript settings are placed in the header of the page with
// the library weight so that inline scripts appear afterwards.
$javascript['settings']['data'][] = $data;
break;

case 'inline':
$javascript[] = $options;
break;

default: // 'file' and 'external'
// Local and external files must keep their name as the associative key
// so the same JavaScript file is not added twice.
$javascript[$options['data']] = $options;
}
}
return $javascript;
}*/
